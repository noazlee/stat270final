

```{r setup}
#| include: false
library(tidyverse)
library(tidymodels)
library(dplyr)
library(ggformula)
library(ggplot2) 
library(GGally)
library(mosaic)
library(ranger)
library(vip)
library(caret)
library(ggfortify)
library(tibble)
library(poLCA)
library(vcd)
library(corrplot)
##install.packages("corrplot")
tidymodels_prefer(quiet = TRUE) 
```

```{r}
df <- read.csv('conversion_predictors_of_clinically_isolated_syndrome_to_multiple_sclerosis.csv')
```

Exploratory Data Analysis:

```{r}
str(df) # All quantitative variables - misleading
# everything except for age and schooling should be qualitative.
```

```{r}
# Converting all categorical variables to factors
df$Gender <- as.factor(df$Gender)
df$Breastfeeding <- as.factor(df$Breastfeeding)
df$Varicella <- as.factor(df$Varicella)
df$Initial_Symptom <- as.factor(df$Initial_Symptom)
df$Mono_or_Polysymptomatic <- as.factor(df$Mono_or_Polysymptomatic)
df$Oligoclonal_Bands <- as.factor(df$Oligoclonal_Bands)
df$LLSSEP <- as.factor(df$LLSSEP)
df$ULSSEP <- as.factor(df$ULSSEP)
df$VEP <- as.factor(df$VEP)
df$BAEP <- as.factor(df$BAEP)
df$Periventricular_MRI <- as.factor(df$Periventricular_MRI)
df$Cortical_MRI <- as.factor(df$Cortical_MRI)
df$Infratentorial_MRI <- as.factor(df$Infratentorial_MRI)
df$Spinal_Cord_MRI <- as.factor(df$Spinal_Cord_MRI)
df$Initial_EDSS <- as.factor(df$Initial_EDSS)
df$Final_EDSS <- as.factor(df$Final_EDSS)
df$group <- as.factor(df$group)


```
```{r}
##Creating a datafram3 2 which switches all of the variables to numeric so that we can plot it in a correlation plot. 
df2 <- df
df2$Gender <- as.numeric(df2$Gender)
df2$Age <- as.numeric(df2$Age)
df2$Schooling <- as.numeric(df2$Schooling)
df2$Breastfeeding <- as.numeric(df2$Breastfeeding)
df2$Varicella <- as.numeric(df2$Varicella)
df2$Initial_Symptom <- as.numeric(df2$Initial_Symptom)
df2$Mono_or_Polysymptomatic <- as.numeric(df2$Mono_or_Polysymptomatic)
df2$Oligoclonal_Bands <- as.numeric(df2$Oligoclonal_Bands)
df2$LLSSEP <- as.numeric(df2$LLSSEP)
df2$ULSSEP <- as.numeric(df2$ULSSEP)
df2$VEP <- as.numeric(df2$VEP)
df2$BAEP <- as.numeric(df2$BAEP)
df2$Periventricular_MRI <- as.numeric(df2$Periventricular_MRI)
df2$Cortical_MRI <- as.numeric(df2$Cortical_MRI)
df2$Infratentorial_MRI <- as.numeric(df2$Infratentorial_MRI)
df2$Spinal_Cord_MRI <- as.numeric(df2$Spinal_Cord_MRI)
df2$Initial_EDSS <- as.numeric(df2$Initial_EDSS)
df2$Final_EDSS <- as.numeric(df2$Final_EDSS)
df2$group <- as.numeric(df2$group)
df2$Spinal_Cord_MRI <- as.numeric(df2$Spinal_Cord_MRI)

df2$group <- NULL

df2$X <- NULL
```

```{r}
df2
```
```{r}
## correlation plot
cor_matrix <- mosaic::cor(df2, use = "complete.obs")  # Use only numeric columns and exclude NAs

# Generate the correlation plot
corrplot(cor_matrix, method = "color", type = "upper", 
         col = colorRampPalette(c("blue", "white", "red"))(200),
         addCoef.col = "black",  # Add correlation coefficients
         tl.col = "black",       # Change text label color
         tl.srt = 45,
         tl.cex = 0.5, 
         number.cex = 0.45)            # Rotate text labels
```


Cramers v Heat Plot:
```{r}
## creating the cramers V heatplot. 
conflicted::conflicts_prefer(mosaic::sum)
conflicted::conflicts_prefer(mosaic::min)

# Function to calculate Cramér's V, code from chat but I dont know if I should add a source or not 
cramers_v <- function(x, y) {
  tbl <- table(x, y)
  chi2 <- chisq.test(tbl)$statistic
  n <- sum(tbl)
  min_dim <- min(dim(tbl)) - 1
  sqrt(chi2 / (n * min_dim))
}

```

```{r}

df$group <-NULL ## remove group because it is our repsonse variable.

cat_vars <- df |> select_if(is.factor)

##Compute pairwise Cramér's V for categorical variables
cramers_matrix <- outer(
 names(cat_vars), names(cat_vars), 
  Vectorize(function(x, y) cramers_v(cat_vars[[x]], cat_vars[[y]]))
)
## will return an error but its because our data set is small I think
```

```{r}

# Convert Cramér's V matrix to tidy format
cramers_df <- as.data.frame(as.table(cramers_matrix))

# Check column names in cramers_df
colnames(cramers_df) <- c("Variable1", "Variable2", "CramersV")

# Ensure Variable1 and Variable2 correspond to the variable names
cramers_df$Variable1 <- factor(cramers_df$Variable1, labels = names(cat_vars))
cramers_df$Variable2 <- factor(cramers_df$Variable2, labels = names(cat_vars))

```

```{r}

variable_names <- colnames(cat_vars)

# Plot heat map
ggplot(cramers_df, aes(Variable1, Variable2, fill = CramersV)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0.5) +
  theme_minimal() +
  scale_x_discrete(labels = variable_names) +  
  scale_y_discrete(labels = variable_names) +
  theme() +
  labs(title = "Cramér's V Heatmap", x = "", y = "") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```



Chi squared hear map: 
```{r}
## Chi squares heat map, essatintly the same as Cramers V, just with Chi sqaured values instead of Cramers V 

# Function to calculate chi-square p-values
chi_square_p <- function(x, y) {
  tbl <- table(x, y)
  chisq.test(tbl)$p.value
}

# Compute pairwise p-values
chi_matrix <- outer(
  names(cat_vars), names(cat_vars), 
  Vectorize(function(x, y) chi_square_p(cat_vars[[x]], cat_vars[[y]]))
)

# Convert to tidy format
chi_df <- as.data.frame(as.table(chi_matrix))
colnames(chi_df) <- c("Variable1", "Variable2", "PValue")

# Plot heatmap of p-values
ggplot(chi_df, aes(Variable1, Variable2, fill = -log10(PValue))) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 1) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Chi-Square Test Heatmap (-log10 P-Value)", x = "", y = "")

##what do grey values do?

```

Mosaic Plot of just group vs Gender. 
```{r}
library(ggmosaic)

ggplot(data = df) +
  geom_mosaic(aes(x = product(group, Gender), fill = group)) +
  labs(title = "Mosaic Plot: Group vs Gender")

## good, but not optimal for like whole data correlation
```

```{r}
ggplot(df, aes(x = Periventricular_MRI, fill = group)) +
  geom_bar(position = "fill") +
  facet_wrap(~Infratentorial_MRI) +
  theme_minimal() +
  labs(title = "Proportion of Groups by MRI Results", x = "Periventricular MRI", y = "Proportion")
```